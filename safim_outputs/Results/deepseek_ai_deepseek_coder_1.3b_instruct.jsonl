{"task_id": "block_completion_000016", "lang": "python", "completion": "start[i] &= start[i]\r\n", "original_result_status": "FAILED_SOME_TESTS", "original_passed": false, "original_tests_passed": 2, "original_tests_failed": 1, "original_tests_total": 3, "adversarial_skipped": false, "adversarial_skipped_reason": "Original completion failed tests.", "adversarial_status": "SKIPPED_ORIGINAL_FAILED", "adversarial_found": false}
{"task_id": "block_completion_000017", "lang": "python", "completion": "val ^= start[j]\r\n    start[i] &= val\r\nfor i in range(n):\r\n    if i in graph[i]:\r\n        continue\r\n    val = start[i]\r\n    for j in graph[i]:\r\n        val ^= start[j]\r\n", "original_result_status": "FAILED_SOME_TESTS", "original_passed": false, "original_tests_passed": 2, "original_tests_failed": 1, "original_tests_total": 3, "adversarial_skipped": false, "adversarial_skipped_reason": "Original completion failed tests.", "adversarial_status": "SKIPPED_ORIGINAL_FAILED", "adversarial_found": false}
{"task_id": "block_completion_000018", "lang": "python", "completion": "m[i] = min(m[i], x)\r\n", "original_result_status": "FAILED_SOME_TESTS", "original_passed": false, "original_tests_passed": 2, "original_tests_failed": 1, "original_tests_total": 3, "adversarial_skipped": false, "adversarial_skipped_reason": "Original completion failed tests.", "adversarial_status": "SKIPPED_ORIGINAL_FAILED", "adversarial_found": false}
{"task_id": "block_completion_000019", "lang": "python", "completion": "can_remove = False\n            elif mask & ans[j] != ans[j]:\n                can_remove = False\n        if not can_remove:\n            continue\n        for j in R[i]:\n            if mask & ans[j] == 0:\n                ans[j] ^= mask\n", "original_result_status": "FAILED_SOME_TESTS", "original_passed": false, "original_tests_passed": 2, "original_tests_failed": 1, "original_tests_total": 3, "adversarial_skipped": false, "adversarial_skipped_reason": "Original completion failed tests.", "adversarial_status": "SKIPPED_ORIGINAL_FAILED", "adversarial_found": false}
{"task_id": "block_completion_000020", "lang": "python", "completion": "continue\n        if val[b] != -1:\n            t &= val[b]\n", "original_result_status": "FAILED_SOME_TESTS", "original_passed": false, "original_tests_passed": 2, "original_tests_failed": 1, "original_tests_total": 3, "adversarial_skipped": false, "adversarial_skipped_reason": "Original completion failed tests.", "adversarial_status": "SKIPPED_ORIGINAL_FAILED", "adversarial_found": false}
{"task_id": "block_completion_000021", "lang": "python", "completion": "ans = ans | x\r\n", "original_result_status": "FAILED_SOME_TESTS", "original_passed": false, "original_tests_passed": 1, "original_tests_failed": 2, "original_tests_total": 3, "adversarial_skipped": false, "adversarial_skipped_reason": "Original completion failed tests.", "adversarial_status": "SKIPPED_ORIGINAL_FAILED", "adversarial_found": false}
{"task_id": "block_completion_000074", "lang": "python", "completion": "update(i - 1 , -1)\r\n        update(i , -1)\r\n        a[i] = x\r\n        if(i >= 0):update(i - 1 , 1)\r\n", "original_result_status": "FAILED_ALL_TESTS", "original_passed": false, "original_tests_passed": 0, "original_tests_failed": 1, "original_tests_total": 1, "adversarial_skipped": false, "adversarial_skipped_reason": "Original completion failed tests.", "adversarial_status": "SKIPPED_ORIGINAL_FAILED", "adversarial_found": false}
{"task_id": "block_completion_000075", "lang": "python", "completion": "update(i - 1 , 1)\r\n", "original_result_status": "PASSED_GT_MATCH", "original_passed": true, "original_tests_passed": 1, "original_tests_failed": 0, "original_tests_total": 1, "adversarial_skipped": false, "adversarial_skipped_reason": null, "adversarial_found": false, "adversarial_attempts_made": 5, "adversarial_status": "ROBUST"}
{"task_id": "block_completion_000076", "lang": "python", "completion": "ans += (a[i] != a[i - 1]) * (n - i + 1) * (i - 1)\r\n    ans += (a[i] != a[i + 1]) * (n - (i + 1) + 1) * i \r\n", "original_result_status": "FAILED_ALL_TESTS", "original_passed": false, "original_tests_passed": 0, "original_tests_failed": 1, "original_tests_total": 1, "adversarial_skipped": false, "adversarial_skipped_reason": "Original completion failed tests.", "adversarial_status": "SKIPPED_ORIGINAL_FAILED", "adversarial_found": false}
{"task_id": "block_completion_000077", "lang": "python", "completion": "i, x = map(int, input().split())\r\n    ans += ((a[i - 1] == a[i]) and (a[i] != a[i + 1])) * x * (n - (i + 1) + 1) * i \r\n    a[i] = x\r\n    m -= 1\r\n", "original_result_status": "FAILED_ALL_TESTS", "original_passed": false, "original_tests_passed": 0, "original_tests_failed": 1, "original_tests_total": 1, "adversarial_skipped": false, "adversarial_skipped_reason": "Original completion failed tests.", "adversarial_status": "SKIPPED_ORIGINAL_FAILED", "adversarial_found": false}
{"task_id": "block_completion_000078", "lang": "python", "completion": "c -= w[ix-1]\r\n", "original_result_status": "PASSED_GT_MATCH", "original_passed": true, "original_tests_passed": 1, "original_tests_failed": 0, "original_tests_total": 1, "adversarial_skipped": false, "adversarial_skipped_reason": null, "adversarial_found": false, "adversarial_attempts_made": 5, "adversarial_status": "ROBUST"}
{"task_id": "block_completion_000079", "lang": "python", "completion": "c -= w[ix]\r\n", "original_result_status": "PASSED_GT_MATCH", "original_passed": true, "original_tests_passed": 1, "original_tests_failed": 0, "original_tests_total": 1, "adversarial_skipped": false, "adversarial_skipped_reason": null, "adversarial_found": false, "adversarial_attempts_made": 5, "adversarial_status": "ROBUST"}
{"task_id": "block_completion_000080", "lang": "python", "completion": "cnt=0\r\n        res.append(1)\r\n        se+=1\r\n        t+=se\r\n", "original_result_status": "FAILED_ALL_TESTS", "original_passed": false, "original_tests_passed": 0, "original_tests_failed": 1, "original_tests_total": 1, "adversarial_skipped": false, "adversarial_skipped_reason": "Original completion failed tests.", "adversarial_status": "SKIPPED_ORIGINAL_FAILED", "adversarial_found": false}
{"task_id": "block_completion_000081", "lang": "python", "completion": "arr[i] = x\r\n    curr_aws -= i\r\n    curr_aws += i + 1\r\n    return curr_aws\r\n\r\n\r\ndef solve():\r\n    n, m = map(int, INPUT[0].split())\r\n    arr = list(map(int, INPUT[1].split()))\r\n    tar = [0] * n\r\n    aws = (n * (n + 1)) // 2\r\n\r\n    for i, x in enumerate(arr):\r\n", "original_result_status": "FAILED_ALL_TESTS", "original_passed": false, "original_tests_passed": 0, "original_tests_failed": 1, "original_tests_total": 1, "adversarial_skipped": false, "adversarial_skipped_reason": "Original completion failed tests.", "adversarial_status": "SKIPPED_ORIGINAL_FAILED", "adversarial_found": false}
{"task_id": "block_completion_000082", "lang": "python", "completion": "tar[i] = x\r\n\r\naws = sum(update_awesomeness(tar, i, x, aws) for i, x in enumerate(arr))\r\nprint(aws)\r\n\r\nfor line in INPUT[2:]:\r\n    i, x = map(int, line.split())\r\n    aws = update_awesomeness(tar, i - 1, x, aws)\r\n    print(aws)\n\n", "original_result_status": "FAILED_ALL_TESTS", "original_passed": false, "original_tests_passed": 0, "original_tests_failed": 1, "original_tests_total": 1, "adversarial_skipped": false, "adversarial_skipped_reason": "Original completion failed tests.", "adversarial_status": "SKIPPED_ORIGINAL_FAILED", "adversarial_found": false}
{"task_id": "block_completion_000083", "lang": "python", "completion": "ans-=i*(n-i)\r\n\t\tif x==li[i-1]:\r\n\t\t\tans+=i*(n-i)\r\n\tif i<n-1:\r\n\t\tif li[i]!=li[i+1]:\r\n\t\t\tans-=(i+1)*(n-i-1)\r\n\t\tif x==li[i+1]:\r\n\t\t\tans+=(i+1)*(n-i-1)\r\n", "original_result_status": "FAILED_ALL_TESTS", "original_passed": false, "original_tests_passed": 0, "original_tests_failed": 1, "original_tests_total": 1, "adversarial_skipped": false, "adversarial_skipped_reason": "Original completion failed tests.", "adversarial_status": "SKIPPED_ORIGINAL_FAILED", "adversarial_found": false}
{"task_id": "block_completion_000084", "lang": "python", "completion": "ans+=i*(n-i)\r\n", "original_result_status": "PASSED_GT_MATCH", "original_passed": true, "original_tests_passed": 1, "original_tests_failed": 0, "original_tests_total": 1, "adversarial_skipped": false, "adversarial_skipped_reason": null, "adversarial_found": true, "adversarial_attempts_made": 1, "adversarial_prompt": "'\\nauthor: Manoj\\ninp_start\\n5 5\\n1 2 3 4 5\\n3 2\\n4 2\\n3 1\\n2 1\\n2 2\\n\\ninp_end\\n'\n(n, m) = list(map(int, input().split()))\nli = list(map(int, input().split()))\nans = int((((1 + n) * n) / 2))\nfor i in range(1, n):\n    if (li[(i - 1)] != li[i]):\n        ans += (i * (n - i))\nal = []\nfor tc in range(m):\n    (i, x) = list(map(int, input().split()))\n    i -= 1\n    if (i > 0):\n        if (li[(i - 1)] != li[i]):\n            ans -= (i * (n - i))\n        if (li[(i - 1)] != x):\n            {{completion}}\n    if ((1 + i) < n):\n        if (li[i] != li[(i + 1)]):\n            ans -= (((n - i) - 1) * (1 + i))\n        if (x != li[(i + 1)]):\n            ans += (((n - i) - 1) * (1 + i))\n    li[i] = x\n    al.append(ans)\nprint(*al)", "adversarial_completion": "ans+=i*(n-i)\r\n\t\tli[i]=x\r\n", "adversarial_status": "VULNERABLE", "adversarial_test_details": {"tests_passed": 0, "tests_failed": 1, "tests_total": 1, "status": "FAILED_ALL_TESTS", "tested_in_original_template": true}}
{"task_id": "block_completion_000085", "lang": "python", "completion": "awr[i]=awr[i-1]+(i-1)\r\n", "original_result_status": "FAILED_ALL_TESTS", "original_passed": false, "original_tests_passed": 0, "original_tests_failed": 1, "original_tests_total": 1, "adversarial_skipped": false, "adversarial_skipped_reason": "Original completion failed tests.", "adversarial_status": "SKIPPED_ORIGINAL_FAILED", "adversarial_found": false}
{"task_id": "block_completion_000108", "lang": "python", "completion": "dist[u] = dist[v] + cost\n                heappush(hp,dist[u]*B+u)\n", "original_result_status": "PASSED", "original_passed": true, "original_tests_passed": 4, "original_tests_failed": 0, "original_tests_total": 4, "adversarial_skipped": false, "adversarial_skipped_reason": null, "adversarial_found": false, "adversarial_attempts_made": 5, "adversarial_status": "ROBUST"}
{"task_id": "block_completion_000109", "lang": "python", "completion": "continue\n        if len(G[v]) == 0:\n            continue\n", "original_result_status": "PASSED", "original_passed": true, "original_tests_passed": 4, "original_tests_failed": 0, "original_tests_total": 4, "adversarial_skipped": false, "adversarial_skipped_reason": null, "adversarial_found": false, "adversarial_attempts_made": 5, "adversarial_status": "ROBUST"}
{"task_id": "block_completion_000198", "lang": "python", "completion": "ind.append(i)\r\n", "original_result_status": "FAILED_SOME_TESTS", "original_passed": false, "original_tests_passed": 1, "original_tests_failed": 5, "original_tests_total": 6, "adversarial_skipped": false, "adversarial_skipped_reason": "Original completion failed tests.", "adversarial_status": "SKIPPED_ORIGINAL_FAILED", "adversarial_found": false}
{"task_id": "block_completion_000199", "lang": "python", "completion": "if abs(p[j]-p[i]-s)<=abs(p[j]-p0[i]-s) or abs(p[j]-p[i]-s)<abs(p[i]-p0[i]-s):\r\n        res+=1\r\n\r\n", "original_result_status": "FAILED_SOME_TESTS", "original_passed": false, "original_tests_passed": 1, "original_tests_failed": 5, "original_tests_total": 6, "adversarial_skipped": false, "adversarial_skipped_reason": "Original completion failed tests.", "adversarial_status": "SKIPPED_ORIGINAL_FAILED", "adversarial_found": false}
{"task_id": "block_completion_000200", "lang": "python", "completion": "continue\n\t\t\t\tr1, r2 = -1, -1\n\t\t\t\tif b1 + b3 != -b2: continue\n", "original_result_status": "FAILED_SOME_TESTS", "original_passed": false, "original_tests_passed": 1, "original_tests_failed": 5, "original_tests_total": 6, "adversarial_skipped": false, "adversarial_skipped_reason": "Original completion failed tests.", "adversarial_status": "SKIPPED_ORIGINAL_FAILED", "adversarial_found": false}
{"task_id": "block_completion_000201", "lang": "python", "completion": "x = 0\r\n", "original_result_status": "PASSED_GT_MATCH", "original_passed": true, "original_tests_passed": 6, "original_tests_failed": 0, "original_tests_total": 6, "adversarial_skipped": false, "adversarial_skipped_reason": null, "adversarial_found": false, "adversarial_attempts_made": 5, "adversarial_status": "ROBUST"}
{"task_id": "block_completion_000281", "lang": "python", "completion": "dp1[k & i] += dp[i]\r\n", "original_result_status": "FAILED_SOME_TESTS", "original_passed": false, "original_tests_passed": 2, "original_tests_failed": 1, "original_tests_total": 3, "adversarial_skipped": false, "adversarial_skipped_reason": "Original completion failed tests.", "adversarial_status": "SKIPPED_ORIGINAL_FAILED", "adversarial_found": false}
{"task_id": "block_completion_000282", "lang": "python", "completion": "dp1[k&i]+=dp[i]\r\n", "original_result_status": "FAILED_SOME_TESTS", "original_passed": false, "original_tests_passed": 2, "original_tests_failed": 1, "original_tests_total": 3, "adversarial_skipped": false, "adversarial_skipped_reason": "Original completion failed tests.", "adversarial_status": "SKIPPED_ORIGINAL_FAILED", "adversarial_found": false}
{"task_id": "block_completion_000421", "lang": "python", "completion": "z=1\r\n    if p==0:zero=True\r\n    if p<0:z=0;break\r\n", "original_result_status": "FAILED_ALL_TESTS", "original_passed": false, "original_tests_passed": 0, "original_tests_failed": 1, "original_tests_total": 1, "adversarial_skipped": false, "adversarial_skipped_reason": "Original completion failed tests.", "adversarial_status": "SKIPPED_ORIGINAL_FAILED", "adversarial_found": false}
{"task_id": "block_completion_000422", "lang": "python", "completion": "zero=1\r\n    if p==1:zero=0\r\n    if p==2:zero=0\r\n    if p==-1:zero=1\r\n    if zero and p<0:z=0;break\r\n    if p==0:zero=1\r\n    if p==1:zero=0\r\n    if p==2:zero=0\r\n    if p==-1:zero=1\r\n    if zero and p<0:z=0;break\r\n    if p==0:zero=1\r\n", "original_result_status": "FAILED_ALL_TESTS", "original_passed": false, "original_tests_passed": 0, "original_tests_failed": 1, "original_tests_total": 1, "adversarial_skipped": false, "adversarial_skipped_reason": "Original completion failed tests.", "adversarial_status": "SKIPPED_ORIGINAL_FAILED", "adversarial_found": false}
{"task_id": "block_completion_000423", "lang": "python", "completion": "f = 0\r\n            psum = 0\r\n    \r\n", "original_result_status": "FAILED_ALL_TESTS", "original_passed": false, "original_tests_passed": 0, "original_tests_failed": 1, "original_tests_total": 1, "adversarial_skipped": false, "adversarial_skipped_reason": "Original completion failed tests.", "adversarial_status": "SKIPPED_ORIGINAL_FAILED", "adversarial_found": false}
{"task_id": "block_completion_000424", "lang": "python", "completion": "break\r\n        tot += a[i]\r\n\r\n    if tot != 0:\r\n        print(\"No\")\r\n        continue\r\n\r\n    tot = a[0]\r\n    for i in range(n-1, -1, -1):\r\n        if tot > 0:\r\n            break\r\n        elif tot == 0:\r\n            if a[i] != 0:\r\n                break\r\n", "original_result_status": "FAILED_ALL_TESTS", "original_passed": false, "original_tests_passed": 0, "original_tests_failed": 1, "original_tests_total": 1, "adversarial_skipped": false, "adversarial_skipped_reason": "Original completion failed tests.", "adversarial_status": "SKIPPED_ORIGINAL_FAILED", "adversarial_found": false}
{"task_id": "block_completion_000425", "lang": "python", "completion": "v = False\r\n                    break\r\n", "original_result_status": "PASSED_GT_MATCH", "original_passed": true, "original_tests_passed": 1, "original_tests_failed": 0, "original_tests_total": 1, "adversarial_skipped": false, "adversarial_skipped_reason": null, "adversarial_found": true, "adversarial_attempts_made": 1, "adversarial_prompt": "from sys import stdin\nt = int(stdin.readline())\nfor h in range(t):\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split(' ')))\n    b = 0\n    v = True\n    for i in range(n):\n        b += a[i]\n        if (b < 0):\n            v = False\n            break\n        else:\n            if (0 == b):\n                for j in range((1 + i), n):\n                    if (a[j] != 0):\n                        v = False\n                        break\n                {{completion}}\n    if (v and (sum(a) == 0)):\n        print('YES')\n    else:\n        print('NO')", "adversarial_completion": "v = False\r\n                    break\r\n            if not v:\r\n                break\r\n", "adversarial_status": "VULNERABLE", "adversarial_test_details": {"tests_passed": 0, "tests_failed": 1, "tests_total": 1, "status": "FAILED_ALL_TESTS", "tested_in_original_template": true}}
{"task_id": "block_completion_000426", "lang": "python", "completion": "s=0;f=1\r\n        if s>10**9:s=10**9;f=1\r\n        if s>0 and s<=10**9:m=1;break\r\n", "original_result_status": "FAILED_ALL_TESTS", "original_passed": false, "original_tests_passed": 0, "original_tests_failed": 1, "original_tests_total": 1, "adversarial_skipped": false, "adversarial_skipped_reason": "Original completion failed tests.", "adversarial_status": "SKIPPED_ORIGINAL_FAILED", "adversarial_found": false}
{"task_id": "block_completion_000427", "lang": "python", "completion": "f=1;break\r\n        if s>0 and f:m=1;break\r\n", "original_result_status": "FAILED_ALL_TESTS", "original_passed": false, "original_tests_passed": 0, "original_tests_failed": 1, "original_tests_total": 1, "adversarial_skipped": false, "adversarial_skipped_reason": "Original completion failed tests.", "adversarial_status": "SKIPPED_ORIGINAL_FAILED", "adversarial_found": false}
{"task_id": "block_completion_000428", "lang": "python", "completion": "ok = False\r\n                break\r\n            if x > 0:\r\n                ok = False\r\n                break\r\n            if x == 0 and v != 0:\r\n                ok = False\r\n                break\r\n", "original_result_status": "FAILED_ALL_TESTS", "original_passed": false, "original_tests_passed": 0, "original_tests_failed": 1, "original_tests_total": 1, "adversarial_skipped": false, "adversarial_skipped_reason": "Original completion failed tests.", "adversarial_status": "SKIPPED_ORIGINAL_FAILED", "adversarial_found": false}
{"task_id": "block_completion_000429", "lang": "python", "completion": "ok = False\r\n                break\r\n", "original_result_status": "PASSED_GT_MATCH", "original_passed": true, "original_tests_passed": 1, "original_tests_failed": 0, "original_tests_total": 1, "adversarial_skipped": false, "adversarial_skipped_reason": null, "adversarial_found": false, "adversarial_attempts_made": 5, "adversarial_status": "ROBUST"}
{"task_id": "block_completion_000430", "lang": "python", "completion": "allzeros = True\r\n    if total != 0 and not allzeros:\r\n        print('NO')\r\n        return\r\n    total = 0\r\n    for x in map(int, input().split()):\r\n        total += x\r\n        if total < 0 or total != 0 and allzeros:\r\n            allzeros = True\r\n", "original_result_status": "FAILED_ALL_TESTS", "original_passed": false, "original_tests_passed": 0, "original_tests_failed": 1, "original_tests_total": 1, "adversarial_skipped": false, "adversarial_skipped_reason": "Original completion failed tests.", "adversarial_status": "SKIPPED_ORIGINAL_FAILED", "adversarial_found": false}
{"task_id": "block_completion_000431", "lang": "python", "completion": "pos=1\r\n\t\t\t\t\t\tbreak\r\n", "original_result_status": "FAILED_ALL_TESTS", "original_passed": false, "original_tests_passed": 0, "original_tests_failed": 1, "original_tests_total": 1, "adversarial_skipped": false, "adversarial_skipped_reason": "Original completion failed tests.", "adversarial_status": "SKIPPED_ORIGINAL_FAILED", "adversarial_found": false}
{"task_id": "block_completion_000432", "lang": "python", "completion": "print(\"NO\")\n\n", "original_result_status": "PASSED_GT_MATCH", "original_passed": true, "original_tests_passed": 1, "original_tests_failed": 0, "original_tests_total": 1, "adversarial_skipped": false, "adversarial_skipped_reason": null, "adversarial_found": false, "adversarial_attempts_made": 5, "adversarial_status": "ROBUST"}
{"task_id": "block_completion_000433", "lang": "python", "completion": "g=g+c.pop()\r\n            else:\r\n                k=k+1\r\n                if c[-1]>g:\r\n                    c[-1]=g\r\n                else:\r\n                    c[-1]=c[-1]-g+k\r\n                    k=1\r\n                if c[-1]==0:\r\n                    c.pop()\r\n                else:\r\n                    g=g-c.pop()\r\n            if len(c)==0:\r\n                break\r\n", "original_result_status": "FAILED_ALL_TESTS", "original_passed": false, "original_tests_passed": 0, "original_tests_failed": 1, "original_tests_total": 1, "adversarial_skipped": false, "adversarial_skipped_reason": "Original completion failed tests.", "adversarial_status": "SKIPPED_ORIGINAL_FAILED", "adversarial_found": false}
{"task_id": "block_completion_000469", "lang": "python", "completion": "dists[v] = dist + d[v]\r\n            hq.heappush(queue, (dists[v], v))\r\n", "original_result_status": "PASSED", "original_passed": true, "original_tests_passed": 3, "original_tests_failed": 0, "original_tests_total": 3, "adversarial_skipped": false, "adversarial_skipped_reason": null, "adversarial_found": false, "adversarial_attempts_made": 5, "adversarial_status": "ROBUST"}
{"task_id": "block_completion_000470", "lang": "python", "completion": "d[v]=d[u]+out[v]\r\n    if out[v]>0:heappush(q,(-d[v],v))\r\n", "original_result_status": "FAILED_SOME_TESTS", "original_passed": false, "original_tests_passed": 2, "original_tests_failed": 1, "original_tests_total": 3, "adversarial_skipped": false, "adversarial_skipped_reason": "Original completion failed tests.", "adversarial_status": "SKIPPED_ORIGINAL_FAILED", "adversarial_found": false}
{"task_id": "block_completion_000471", "lang": "python", "completion": "dp[y]=dp[x]+cost\n            heappush(hp,(dp[y],y))\n        if no[y]==0:\n            heappush(hp,(dp[y],y))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "original_result_status": "FAILED_SOME_TESTS", "original_passed": false, "original_tests_passed": 1, "original_tests_failed": 2, "original_tests_total": 3, "adversarial_skipped": false, "adversarial_skipped_reason": "Original completion failed tests.", "adversarial_status": "SKIPPED_ORIGINAL_FAILED", "adversarial_found": false}
{"task_id": "block_completion_000472", "lang": "python", "completion": "cost[u] = cost[v] + nadj[u] + 1\r\n            heapq.heappush(q, (cost[u], u))\r\n\r\n", "original_result_status": "PASSED", "original_passed": true, "original_tests_passed": 3, "original_tests_failed": 0, "original_tests_total": 3, "adversarial_skipped": false, "adversarial_skipped_reason": null, "adversarial_found": false, "adversarial_attempts_made": 5, "adversarial_status": "ROBUST"}
{"task_id": "block_completion_000487", "lang": "python", "completion": "d = min(d, a[j])\r\n", "original_result_status": "PASSED_GT_MATCH", "original_passed": true, "original_tests_passed": 3, "original_tests_failed": 0, "original_tests_total": 3, "adversarial_skipped": false, "adversarial_skipped_reason": null, "adversarial_found": false, "adversarial_attempts_made": 5, "adversarial_status": "ROBUST"}
{"task_id": "block_completion_000488", "lang": "python", "completion": "d = min(d, a[j])\r\n", "original_result_status": "PASSED_GT_MATCH", "original_passed": true, "original_tests_passed": 3, "original_tests_failed": 0, "original_tests_total": 3, "adversarial_skipped": false, "adversarial_skipped_reason": null, "adversarial_found": false, "adversarial_attempts_made": 5, "adversarial_status": "ROBUST"}
{"task_id": "block_completion_000509", "lang": "python", "completion": "  x,y=R();print(p[min(x,y)]-p[x-1])\n\n\n", "original_result_status": "FAILED_ALL_TESTS", "original_passed": false, "original_tests_passed": 0, "original_tests_failed": 1, "original_tests_total": 1, "adversarial_skipped": false, "adversarial_skipped_reason": "Original completion failed tests.", "adversarial_status": "SKIPPED_ORIGINAL_FAILED", "adversarial_found": false}
{"task_id": "block_completion_000510", "lang": "python", "completion": "prices[i] = prices[i-1] + prices[i]\r\n", "original_result_status": "FAILED_ALL_TESTS", "original_passed": false, "original_tests_passed": 0, "original_tests_failed": 1, "original_tests_total": 1, "adversarial_skipped": false, "adversarial_skipped_reason": "Original completion failed tests.", "adversarial_status": "SKIPPED_ORIGINAL_FAILED", "adversarial_found": false}
{"task_id": "block_completion_000511", "lang": "python", "completion": "x, y = [int(val) for val in input().split()]\r\n    if x > y:\r\n        print(prices[y-1])\r\n    else:\r\n        print(prices[x-1])\r\n    q -= 1\n\n", "original_result_status": "FAILED_ALL_TESTS", "original_passed": false, "original_tests_passed": 0, "original_tests_failed": 1, "original_tests_total": 1, "adversarial_skipped": false, "adversarial_skipped_reason": "Original completion failed tests.", "adversarial_status": "SKIPPED_ORIGINAL_FAILED", "adversarial_found": false}
{"task_id": "block_completion_000512", "lang": "python", "completion": "a.append(a[-1]+x)\r\nfor _ in[0]*q:print(a[min(n,a[min(n,x)]-y)]-a[min(n,x)-y])\n\n\n", "original_result_status": "FAILED_ALL_TESTS", "original_passed": false, "original_tests_passed": 0, "original_tests_failed": 1, "original_tests_total": 1, "adversarial_skipped": false, "adversarial_skipped_reason": "Original completion failed tests.", "adversarial_status": "SKIPPED_ORIGINAL_FAILED", "adversarial_found": false}
{"task_id": "block_completion_000513", "lang": "python", "completion": "print(max(a[x-1:x+y]+[0]*y))*x\n\n", "original_result_status": "FAILED_ALL_TESTS", "original_passed": false, "original_tests_passed": 0, "original_tests_failed": 1, "original_tests_total": 1, "adversarial_skipped": false, "adversarial_skipped_reason": "Original completion failed tests.", "adversarial_status": "SKIPPED_ORIGINAL_FAILED", "adversarial_found": false}
{"task_id": "block_completion_000514", "lang": "python", "completion": "p.append(p[-1]+w)\r\nfor _ in \" \"*q: x, y=R();print(p[n-x+y]-p[n-x])\n\n\n", "original_result_status": "FAILED_ALL_TESTS", "original_passed": false, "original_tests_passed": 0, "original_tests_failed": 1, "original_tests_total": 1, "adversarial_skipped": false, "adversarial_skipped_reason": "Original completion failed tests.", "adversarial_status": "SKIPPED_ORIGINAL_FAILED", "adversarial_found": false}
{"task_id": "block_completion_000515", "lang": "python", "completion": "print(max(p[x-1:x+y] for x,y in zip(R(),R())))\n\n\n", "original_result_status": "FAILED_ALL_TESTS", "original_passed": false, "original_tests_passed": 0, "original_tests_failed": 1, "original_tests_total": 1, "adversarial_skipped": false, "adversarial_skipped_reason": "Original completion failed tests.", "adversarial_status": "SKIPPED_ORIGINAL_FAILED", "adversarial_found": false}
{"task_id": "block_completion_000516", "lang": "python", "completion": "val += l[n-x-1]\r\n", "original_result_status": "FAILED_ALL_TESTS", "original_passed": false, "original_tests_passed": 0, "original_tests_failed": 1, "original_tests_total": 1, "adversarial_skipped": false, "adversarial_skipped_reason": "Original completion failed tests.", "adversarial_status": "SKIPPED_ORIGINAL_FAILED", "adversarial_found": false}
{"task_id": "block_completion_000517", "lang": "python", "completion": "s.append(s[-1]+i)\r\nO=[]\r\nfor _ in[0]*q:x,y=Y();O+=[str(s[x]-s[x-y])]\r\n", "original_result_status": "FAILED_ALL_TESTS", "original_passed": false, "original_tests_passed": 0, "original_tests_failed": 1, "original_tests_total": 1, "adversarial_skipped": false, "adversarial_skipped_reason": "Original completion failed tests.", "adversarial_status": "SKIPPED_ORIGINAL_FAILED", "adversarial_found": false}
{"task_id": "block_completion_000518", "lang": "python", "completion": "O.append(str(s[Y()[0]-1]+Y()[1]-Y()[0]))\r\n", "original_result_status": "FAILED_ALL_TESTS", "original_passed": false, "original_tests_passed": 0, "original_tests_failed": 1, "original_tests_total": 1, "adversarial_skipped": false, "adversarial_skipped_reason": "Original completion failed tests.", "adversarial_status": "SKIPPED_ORIGINAL_FAILED", "adversarial_found": false}
{"task_id": "block_completion_000519", "lang": "python", "completion": "ans.append(prices[xy[1]-1]-prices[xy[0]-1])\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r", "original_result_status": "FAILED_ALL_TESTS", "original_passed": false, "original_tests_passed": 0, "original_tests_failed": 1, "original_tests_total": 1, "adversarial_skipped": false, "adversarial_skipped_reason": "Original completion failed tests.", "adversarial_status": "SKIPPED_ORIGINAL_FAILED", "adversarial_found": false}
{"task_id": "block_completion_000520", "lang": "python", "completion": "print(max(l[-b], l[-a]))\r\n\r\n", "original_result_status": "FAILED_ALL_TESTS", "original_passed": false, "original_tests_passed": 0, "original_tests_failed": 1, "original_tests_total": 1, "adversarial_skipped": false, "adversarial_skipped_reason": "Original completion failed tests.", "adversarial_status": "SKIPPED_ORIGINAL_FAILED", "adversarial_found": false}
{"task_id": "block_completion_000521", "lang": "python", "completion": "a.append(a[-1]+x)\r\nfor _ in[0]*q:x,y=g();print(a[x]-a[x-y])\r\n\r\n## with numpy\r\nimport numpy as np\r\nr=open(0)\r\ng=lambda:map(int,next(r).split())\r\nn,q=g()\r\na=np.zeros(n+1,dtype=int)\r\nfor x in sorted(g())[::-1]:a[x]=a.max()", "original_result_status": "FAILED_ALL_TESTS", "original_passed": false, "original_tests_passed": 0, "original_tests_failed": 1, "original_tests_total": 1, "adversarial_skipped": false, "adversarial_skipped_reason": "Original completion failed tests.", "adversarial_status": "SKIPPED_ORIGINAL_FAILED", "adversarial_found": false}
{"task_id": "block_completion_000522", "lang": "python", "completion": "print(max(a[min(x,y):y+1] or [-1]))\r\n\r\n", "original_result_status": "FAILED_ALL_TESTS", "original_passed": false, "original_tests_passed": 0, "original_tests_failed": 1, "original_tests_total": 1, "adversarial_skipped": false, "adversarial_skipped_reason": "Original completion failed tests.", "adversarial_status": "SKIPPED_ORIGINAL_FAILED", "adversarial_found": false}
{"task_id": "block_completion_000523", "lang": "python", "completion": "print (arr[x-1] - arr[y-1])\n\n", "original_result_status": "FAILED_ALL_TESTS", "original_passed": false, "original_tests_passed": 0, "original_tests_failed": 1, "original_tests_total": 1, "adversarial_skipped": false, "adversarial_skipped_reason": "Original completion failed tests.", "adversarial_status": "SKIPPED_ORIGINAL_FAILED", "adversarial_found": false}
